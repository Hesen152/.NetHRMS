/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICitiesClient {
    get(): Observable<CityVm>;
}

@Injectable({
    providedIn: 'root'
})
export class CitiesClient implements ICitiesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Observable<CityVm> {
        let url_ = this.baseUrl + "/api/Cities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<CityVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CityVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CityVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CityVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CityVm>(<any>null);
    }
}

export interface ITodoItemsClient {
    getTodoItemsWithPagination(listId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfTodoItemDto>;
    create(command: CreateTodoItemCommand): Observable<number>;
    update(id: number, command: UpdateTodoItemCommand): Observable<FileResponse>;
    delete(id: number): Observable<FileResponse>;
    updateItemDetails(id: number | undefined, command: UpdateTodoItemDetailCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class TodoItemsClient implements ITodoItemsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTodoItemsWithPagination(listId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfTodoItemDto> {
        let url_ = this.baseUrl + "/api/TodoItems?";
        if (listId === null)
            throw new Error("The parameter 'listId' cannot be null.");
        else if (listId !== undefined)
            url_ += "ListId=" + encodeURIComponent("" + listId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTodoItemsWithPagination(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTodoItemsWithPagination(<any>response_);
                } catch (e) {
                    return <Observable<PaginatedListOfTodoItemDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaginatedListOfTodoItemDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTodoItemsWithPagination(response: HttpResponseBase): Observable<PaginatedListOfTodoItemDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfTodoItemDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfTodoItemDto>(<any>null);
    }

    create(command: CreateTodoItemCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/TodoItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    update(id: number, command: UpdateTodoItemCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/TodoItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/TodoItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    updateItemDetails(id: number | undefined, command: UpdateTodoItemDetailCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/TodoItems/UpdateItemDetails?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateItemDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateItemDetails(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateItemDetails(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ITodoListsClient {
    get(): Observable<TodosVm>;
    create(command: CreateTodoListCommand): Observable<number>;
    get2(id: number): Observable<FileResponse>;
    update(id: number, command: UpdateTodoListCommand): Observable<FileResponse>;
    delete(id: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class TodoListsClient implements ITodoListsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Observable<TodosVm> {
        let url_ = this.baseUrl + "/api/TodoLists";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<TodosVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<TodosVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<TodosVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodosVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TodosVm>(<any>null);
    }

    create(command: CreateTodoListCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/TodoLists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    get2(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/TodoLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet2(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGet2(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    update(id: number, command: UpdateTodoListCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/TodoLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/TodoLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IWeatherForecastClient {
    get(): Observable<WeatherForecast[]>;
}

@Injectable({
    providedIn: 'root'
})
export class WeatherForecastClient implements IWeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

export class CityVm implements ICityVm {
    lists?: CityListDto[] | undefined;

    constructor(data?: ICityVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(CityListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CityVm {
        data = typeof data === 'object' ? data : {};
        let result = new CityVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICityVm {
    lists?: CityListDto[] | undefined;
}

export class CityListDto implements ICityListDto {
    id?: number;
    name?: string | undefined;
    jobAdverts?: JobAdvert[] | undefined;

    constructor(data?: ICityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["jobAdverts"])) {
                this.jobAdverts = [] as any;
                for (let item of _data["jobAdverts"])
                    this.jobAdverts!.push(JobAdvert.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CityListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.jobAdverts)) {
            data["jobAdverts"] = [];
            for (let item of this.jobAdverts)
                data["jobAdverts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICityListDto {
    id?: number;
    name?: string | undefined;
    jobAdverts?: JobAdvert[] | undefined;
}

export class JobAdvert implements IJobAdvert {
    id?: number;
    employerId?: number;
    jobPositionId?: number;
    cityId?: number;
    description?: string | undefined;
    minSalary?: number | undefined;
    maxSalary?: number | undefined;
    numberOfOpenPositions?: number;
    createdAt?: Date;
    applicationDeadline?: Date | undefined;
    isActive?: boolean;
    isDeleted?: boolean;
    workingTypeId?: number | undefined;
    workingTimeId?: number | undefined;
    city?: City | undefined;
    employer?: Employer | undefined;
    jobPosition?: JobPosition | undefined;
    workingTime?: WorkingTime | undefined;
    workingType?: WorkingType | undefined;

    constructor(data?: IJobAdvert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.employerId = _data["employerId"];
            this.jobPositionId = _data["jobPositionId"];
            this.cityId = _data["cityId"];
            this.description = _data["description"];
            this.minSalary = _data["minSalary"];
            this.maxSalary = _data["maxSalary"];
            this.numberOfOpenPositions = _data["numberOfOpenPositions"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.applicationDeadline = _data["applicationDeadline"] ? new Date(_data["applicationDeadline"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
            this.workingTypeId = _data["workingTypeId"];
            this.workingTimeId = _data["workingTimeId"];
            this.city = _data["city"] ? City.fromJS(_data["city"]) : <any>undefined;
            this.employer = _data["employer"] ? Employer.fromJS(_data["employer"]) : <any>undefined;
            this.jobPosition = _data["jobPosition"] ? JobPosition.fromJS(_data["jobPosition"]) : <any>undefined;
            this.workingTime = _data["workingTime"] ? WorkingTime.fromJS(_data["workingTime"]) : <any>undefined;
            this.workingType = _data["workingType"] ? WorkingType.fromJS(_data["workingType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JobAdvert {
        data = typeof data === 'object' ? data : {};
        let result = new JobAdvert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["employerId"] = this.employerId;
        data["jobPositionId"] = this.jobPositionId;
        data["cityId"] = this.cityId;
        data["description"] = this.description;
        data["minSalary"] = this.minSalary;
        data["maxSalary"] = this.maxSalary;
        data["numberOfOpenPositions"] = this.numberOfOpenPositions;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["applicationDeadline"] = this.applicationDeadline ? this.applicationDeadline.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["workingTypeId"] = this.workingTypeId;
        data["workingTimeId"] = this.workingTimeId;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["employer"] = this.employer ? this.employer.toJSON() : <any>undefined;
        data["jobPosition"] = this.jobPosition ? this.jobPosition.toJSON() : <any>undefined;
        data["workingTime"] = this.workingTime ? this.workingTime.toJSON() : <any>undefined;
        data["workingType"] = this.workingType ? this.workingType.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IJobAdvert {
    id?: number;
    employerId?: number;
    jobPositionId?: number;
    cityId?: number;
    description?: string | undefined;
    minSalary?: number | undefined;
    maxSalary?: number | undefined;
    numberOfOpenPositions?: number;
    createdAt?: Date;
    applicationDeadline?: Date | undefined;
    isActive?: boolean;
    isDeleted?: boolean;
    workingTypeId?: number | undefined;
    workingTimeId?: number | undefined;
    city?: City | undefined;
    employer?: Employer | undefined;
    jobPosition?: JobPosition | undefined;
    workingTime?: WorkingTime | undefined;
    workingType?: WorkingType | undefined;
}

export class City implements ICity {
    id?: number;
    name?: string | undefined;
    jobAdverts?: JobAdvert[] | undefined;

    constructor(data?: ICity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["jobAdverts"])) {
                this.jobAdverts = [] as any;
                for (let item of _data["jobAdverts"])
                    this.jobAdverts!.push(JobAdvert.fromJS(item));
            }
        }
    }

    static fromJS(data: any): City {
        data = typeof data === 'object' ? data : {};
        let result = new City();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.jobAdverts)) {
            data["jobAdverts"] = [];
            for (let item of this.jobAdverts)
                data["jobAdverts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICity {
    id?: number;
    name?: string | undefined;
    jobAdverts?: JobAdvert[] | undefined;
}

export class Employer implements IEmployer {
    userId?: number;
    companyName?: string | undefined;
    website?: string | undefined;
    corporateEmail?: string | undefined;
    phone?: string | undefined;
    user?: User | undefined;
    employerUpdates?: EmployerUpdate[] | undefined;
    jobAdverts?: JobAdvert[] | undefined;

    constructor(data?: IEmployer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.companyName = _data["companyName"];
            this.website = _data["website"];
            this.corporateEmail = _data["corporateEmail"];
            this.phone = _data["phone"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            if (Array.isArray(_data["employerUpdates"])) {
                this.employerUpdates = [] as any;
                for (let item of _data["employerUpdates"])
                    this.employerUpdates!.push(EmployerUpdate.fromJS(item));
            }
            if (Array.isArray(_data["jobAdverts"])) {
                this.jobAdverts = [] as any;
                for (let item of _data["jobAdverts"])
                    this.jobAdverts!.push(JobAdvert.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Employer {
        data = typeof data === 'object' ? data : {};
        let result = new Employer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["companyName"] = this.companyName;
        data["website"] = this.website;
        data["corporateEmail"] = this.corporateEmail;
        data["phone"] = this.phone;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (Array.isArray(this.employerUpdates)) {
            data["employerUpdates"] = [];
            for (let item of this.employerUpdates)
                data["employerUpdates"].push(item.toJSON());
        }
        if (Array.isArray(this.jobAdverts)) {
            data["jobAdverts"] = [];
            for (let item of this.jobAdverts)
                data["jobAdverts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEmployer {
    userId?: number;
    companyName?: string | undefined;
    website?: string | undefined;
    corporateEmail?: string | undefined;
    phone?: string | undefined;
    user?: User | undefined;
    employerUpdates?: EmployerUpdate[] | undefined;
    jobAdverts?: JobAdvert[] | undefined;
}

export class User implements IUser {
    id?: number;
    email?: string | undefined;
    password?: string | undefined;
    createdAt?: Date;
    isActive?: boolean;
    isDeleted?: boolean;
    companyStaff?: CompanyStaff | undefined;
    employer?: Employer | undefined;
    jobSeeker?: JobSeeker | undefined;
    companyStaffVerifications?: CompanyStaffVerification[] | undefined;
    emailActivations?: EmailActivation[] | undefined;
    mernisActivations?: MernisActivation[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
            this.companyStaff = _data["companyStaff"] ? CompanyStaff.fromJS(_data["companyStaff"]) : <any>undefined;
            this.employer = _data["employer"] ? Employer.fromJS(_data["employer"]) : <any>undefined;
            this.jobSeeker = _data["jobSeeker"] ? JobSeeker.fromJS(_data["jobSeeker"]) : <any>undefined;
            if (Array.isArray(_data["companyStaffVerifications"])) {
                this.companyStaffVerifications = [] as any;
                for (let item of _data["companyStaffVerifications"])
                    this.companyStaffVerifications!.push(CompanyStaffVerification.fromJS(item));
            }
            if (Array.isArray(_data["emailActivations"])) {
                this.emailActivations = [] as any;
                for (let item of _data["emailActivations"])
                    this.emailActivations!.push(EmailActivation.fromJS(item));
            }
            if (Array.isArray(_data["mernisActivations"])) {
                this.mernisActivations = [] as any;
                for (let item of _data["mernisActivations"])
                    this.mernisActivations!.push(MernisActivation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["password"] = this.password;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["companyStaff"] = this.companyStaff ? this.companyStaff.toJSON() : <any>undefined;
        data["employer"] = this.employer ? this.employer.toJSON() : <any>undefined;
        data["jobSeeker"] = this.jobSeeker ? this.jobSeeker.toJSON() : <any>undefined;
        if (Array.isArray(this.companyStaffVerifications)) {
            data["companyStaffVerifications"] = [];
            for (let item of this.companyStaffVerifications)
                data["companyStaffVerifications"].push(item.toJSON());
        }
        if (Array.isArray(this.emailActivations)) {
            data["emailActivations"] = [];
            for (let item of this.emailActivations)
                data["emailActivations"].push(item.toJSON());
        }
        if (Array.isArray(this.mernisActivations)) {
            data["mernisActivations"] = [];
            for (let item of this.mernisActivations)
                data["mernisActivations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUser {
    id?: number;
    email?: string | undefined;
    password?: string | undefined;
    createdAt?: Date;
    isActive?: boolean;
    isDeleted?: boolean;
    companyStaff?: CompanyStaff | undefined;
    employer?: Employer | undefined;
    jobSeeker?: JobSeeker | undefined;
    companyStaffVerifications?: CompanyStaffVerification[] | undefined;
    emailActivations?: EmailActivation[] | undefined;
    mernisActivations?: MernisActivation[] | undefined;
}

export class CompanyStaff implements ICompanyStaff {
    userId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    user?: User | undefined;

    constructor(data?: ICompanyStaff) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CompanyStaff {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyStaff();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICompanyStaff {
    userId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    user?: User | undefined;
}

export class JobSeeker implements IJobSeeker {
    userId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    identityNumber?: string | undefined;
    birthDate?: Date;
    cvId?: number | undefined;
    cv?: JobSeekerCv | undefined;
    user?: User | undefined;
    jobSeekerCvs?: JobSeekerCv[] | undefined;

    constructor(data?: IJobSeeker) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.identityNumber = _data["identityNumber"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.cvId = _data["cvId"];
            this.cv = _data["cv"] ? JobSeekerCv.fromJS(_data["cv"]) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            if (Array.isArray(_data["jobSeekerCvs"])) {
                this.jobSeekerCvs = [] as any;
                for (let item of _data["jobSeekerCvs"])
                    this.jobSeekerCvs!.push(JobSeekerCv.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JobSeeker {
        data = typeof data === 'object' ? data : {};
        let result = new JobSeeker();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["identityNumber"] = this.identityNumber;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["cvId"] = this.cvId;
        data["cv"] = this.cv ? this.cv.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (Array.isArray(this.jobSeekerCvs)) {
            data["jobSeekerCvs"] = [];
            for (let item of this.jobSeekerCvs)
                data["jobSeekerCvs"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IJobSeeker {
    userId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    identityNumber?: string | undefined;
    birthDate?: Date;
    cvId?: number | undefined;
    cv?: JobSeekerCv | undefined;
    user?: User | undefined;
    jobSeekerCvs?: JobSeekerCv[] | undefined;
}

export class JobSeekerCv implements IJobSeekerCv {
    id?: number;
    jobSeekerId?: number;
    coverLetter?: string | undefined;
    createdAt?: Date;
    jobSeeker?: JobSeeker | undefined;
    jobSeekerCvEducations?: JobSeekerCvEducation[] | undefined;
    jobSeekerCvExperiences?: JobSeekerCvExperience[] | undefined;
    jobSeekerCvImages?: JobSeekerCvImage[] | undefined;
    jobSeekerCvLanguages?: JobSeekerCvLanguage[] | undefined;
    jobSeekerCvSkills?: JobSeekerCvSkill[] | undefined;
    jobSeekerCvWebSites?: JobSeekerCvWebSite[] | undefined;
    jobSeekers?: JobSeeker[] | undefined;

    constructor(data?: IJobSeekerCv) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobSeekerId = _data["jobSeekerId"];
            this.coverLetter = _data["coverLetter"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.jobSeeker = _data["jobSeeker"] ? JobSeeker.fromJS(_data["jobSeeker"]) : <any>undefined;
            if (Array.isArray(_data["jobSeekerCvEducations"])) {
                this.jobSeekerCvEducations = [] as any;
                for (let item of _data["jobSeekerCvEducations"])
                    this.jobSeekerCvEducations!.push(JobSeekerCvEducation.fromJS(item));
            }
            if (Array.isArray(_data["jobSeekerCvExperiences"])) {
                this.jobSeekerCvExperiences = [] as any;
                for (let item of _data["jobSeekerCvExperiences"])
                    this.jobSeekerCvExperiences!.push(JobSeekerCvExperience.fromJS(item));
            }
            if (Array.isArray(_data["jobSeekerCvImages"])) {
                this.jobSeekerCvImages = [] as any;
                for (let item of _data["jobSeekerCvImages"])
                    this.jobSeekerCvImages!.push(JobSeekerCvImage.fromJS(item));
            }
            if (Array.isArray(_data["jobSeekerCvLanguages"])) {
                this.jobSeekerCvLanguages = [] as any;
                for (let item of _data["jobSeekerCvLanguages"])
                    this.jobSeekerCvLanguages!.push(JobSeekerCvLanguage.fromJS(item));
            }
            if (Array.isArray(_data["jobSeekerCvSkills"])) {
                this.jobSeekerCvSkills = [] as any;
                for (let item of _data["jobSeekerCvSkills"])
                    this.jobSeekerCvSkills!.push(JobSeekerCvSkill.fromJS(item));
            }
            if (Array.isArray(_data["jobSeekerCvWebSites"])) {
                this.jobSeekerCvWebSites = [] as any;
                for (let item of _data["jobSeekerCvWebSites"])
                    this.jobSeekerCvWebSites!.push(JobSeekerCvWebSite.fromJS(item));
            }
            if (Array.isArray(_data["jobSeekers"])) {
                this.jobSeekers = [] as any;
                for (let item of _data["jobSeekers"])
                    this.jobSeekers!.push(JobSeeker.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JobSeekerCv {
        data = typeof data === 'object' ? data : {};
        let result = new JobSeekerCv();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobSeekerId"] = this.jobSeekerId;
        data["coverLetter"] = this.coverLetter;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["jobSeeker"] = this.jobSeeker ? this.jobSeeker.toJSON() : <any>undefined;
        if (Array.isArray(this.jobSeekerCvEducations)) {
            data["jobSeekerCvEducations"] = [];
            for (let item of this.jobSeekerCvEducations)
                data["jobSeekerCvEducations"].push(item.toJSON());
        }
        if (Array.isArray(this.jobSeekerCvExperiences)) {
            data["jobSeekerCvExperiences"] = [];
            for (let item of this.jobSeekerCvExperiences)
                data["jobSeekerCvExperiences"].push(item.toJSON());
        }
        if (Array.isArray(this.jobSeekerCvImages)) {
            data["jobSeekerCvImages"] = [];
            for (let item of this.jobSeekerCvImages)
                data["jobSeekerCvImages"].push(item.toJSON());
        }
        if (Array.isArray(this.jobSeekerCvLanguages)) {
            data["jobSeekerCvLanguages"] = [];
            for (let item of this.jobSeekerCvLanguages)
                data["jobSeekerCvLanguages"].push(item.toJSON());
        }
        if (Array.isArray(this.jobSeekerCvSkills)) {
            data["jobSeekerCvSkills"] = [];
            for (let item of this.jobSeekerCvSkills)
                data["jobSeekerCvSkills"].push(item.toJSON());
        }
        if (Array.isArray(this.jobSeekerCvWebSites)) {
            data["jobSeekerCvWebSites"] = [];
            for (let item of this.jobSeekerCvWebSites)
                data["jobSeekerCvWebSites"].push(item.toJSON());
        }
        if (Array.isArray(this.jobSeekers)) {
            data["jobSeekers"] = [];
            for (let item of this.jobSeekers)
                data["jobSeekers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IJobSeekerCv {
    id?: number;
    jobSeekerId?: number;
    coverLetter?: string | undefined;
    createdAt?: Date;
    jobSeeker?: JobSeeker | undefined;
    jobSeekerCvEducations?: JobSeekerCvEducation[] | undefined;
    jobSeekerCvExperiences?: JobSeekerCvExperience[] | undefined;
    jobSeekerCvImages?: JobSeekerCvImage[] | undefined;
    jobSeekerCvLanguages?: JobSeekerCvLanguage[] | undefined;
    jobSeekerCvSkills?: JobSeekerCvSkill[] | undefined;
    jobSeekerCvWebSites?: JobSeekerCvWebSite[] | undefined;
    jobSeekers?: JobSeeker[] | undefined;
}

export class JobSeekerCvEducation implements IJobSeekerCvEducation {
    id?: number;
    jobSeekerCvId?: number;
    schoolName?: string | undefined;
    departmentName?: string | undefined;
    startDate?: Date;
    graduationDate?: Date | undefined;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;

    constructor(data?: IJobSeekerCvEducation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobSeekerCvId = _data["jobSeekerCvId"];
            this.schoolName = _data["schoolName"];
            this.departmentName = _data["departmentName"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.graduationDate = _data["graduationDate"] ? new Date(_data["graduationDate"].toString()) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.jobSeekerCv = _data["jobSeekerCv"] ? JobSeekerCv.fromJS(_data["jobSeekerCv"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JobSeekerCvEducation {
        data = typeof data === 'object' ? data : {};
        let result = new JobSeekerCvEducation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobSeekerCvId"] = this.jobSeekerCvId;
        data["schoolName"] = this.schoolName;
        data["departmentName"] = this.departmentName;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["graduationDate"] = this.graduationDate ? this.graduationDate.toISOString() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["jobSeekerCv"] = this.jobSeekerCv ? this.jobSeekerCv.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IJobSeekerCvEducation {
    id?: number;
    jobSeekerCvId?: number;
    schoolName?: string | undefined;
    departmentName?: string | undefined;
    startDate?: Date;
    graduationDate?: Date | undefined;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;
}

export class JobSeekerCvExperience implements IJobSeekerCvExperience {
    id?: number;
    jobSeekerCvId?: number;
    jobPositionId?: number;
    workplaceName?: string | undefined;
    startDate?: Date;
    quitDate?: Date | undefined;
    createdAt?: Date;
    jobPosition?: JobPosition | undefined;
    jobSeekerCv?: JobSeekerCv | undefined;

    constructor(data?: IJobSeekerCvExperience) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobSeekerCvId = _data["jobSeekerCvId"];
            this.jobPositionId = _data["jobPositionId"];
            this.workplaceName = _data["workplaceName"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.quitDate = _data["quitDate"] ? new Date(_data["quitDate"].toString()) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.jobPosition = _data["jobPosition"] ? JobPosition.fromJS(_data["jobPosition"]) : <any>undefined;
            this.jobSeekerCv = _data["jobSeekerCv"] ? JobSeekerCv.fromJS(_data["jobSeekerCv"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JobSeekerCvExperience {
        data = typeof data === 'object' ? data : {};
        let result = new JobSeekerCvExperience();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobSeekerCvId"] = this.jobSeekerCvId;
        data["jobPositionId"] = this.jobPositionId;
        data["workplaceName"] = this.workplaceName;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["quitDate"] = this.quitDate ? this.quitDate.toISOString() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["jobPosition"] = this.jobPosition ? this.jobPosition.toJSON() : <any>undefined;
        data["jobSeekerCv"] = this.jobSeekerCv ? this.jobSeekerCv.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IJobSeekerCvExperience {
    id?: number;
    jobSeekerCvId?: number;
    jobPositionId?: number;
    workplaceName?: string | undefined;
    startDate?: Date;
    quitDate?: Date | undefined;
    createdAt?: Date;
    jobPosition?: JobPosition | undefined;
    jobSeekerCv?: JobSeekerCv | undefined;
}

export class JobPosition implements IJobPosition {
    id?: number;
    title?: string | undefined;
    createdAt?: Date;
    isActive?: boolean;
    isDeleted?: boolean;
    jobAdverts?: JobAdvert[] | undefined;
    jobSeekerCvExperiences?: JobSeekerCvExperience[] | undefined;

    constructor(data?: IJobPosition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.isDeleted = _data["isDeleted"];
            if (Array.isArray(_data["jobAdverts"])) {
                this.jobAdverts = [] as any;
                for (let item of _data["jobAdverts"])
                    this.jobAdverts!.push(JobAdvert.fromJS(item));
            }
            if (Array.isArray(_data["jobSeekerCvExperiences"])) {
                this.jobSeekerCvExperiences = [] as any;
                for (let item of _data["jobSeekerCvExperiences"])
                    this.jobSeekerCvExperiences!.push(JobSeekerCvExperience.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JobPosition {
        data = typeof data === 'object' ? data : {};
        let result = new JobPosition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        if (Array.isArray(this.jobAdverts)) {
            data["jobAdverts"] = [];
            for (let item of this.jobAdverts)
                data["jobAdverts"].push(item.toJSON());
        }
        if (Array.isArray(this.jobSeekerCvExperiences)) {
            data["jobSeekerCvExperiences"] = [];
            for (let item of this.jobSeekerCvExperiences)
                data["jobSeekerCvExperiences"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IJobPosition {
    id?: number;
    title?: string | undefined;
    createdAt?: Date;
    isActive?: boolean;
    isDeleted?: boolean;
    jobAdverts?: JobAdvert[] | undefined;
    jobSeekerCvExperiences?: JobSeekerCvExperience[] | undefined;
}

export class JobSeekerCvImage implements IJobSeekerCvImage {
    id?: number;
    jobSeekerCvId?: number;
    url?: string | undefined;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;

    constructor(data?: IJobSeekerCvImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobSeekerCvId = _data["jobSeekerCvId"];
            this.url = _data["url"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.jobSeekerCv = _data["jobSeekerCv"] ? JobSeekerCv.fromJS(_data["jobSeekerCv"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JobSeekerCvImage {
        data = typeof data === 'object' ? data : {};
        let result = new JobSeekerCvImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobSeekerCvId"] = this.jobSeekerCvId;
        data["url"] = this.url;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["jobSeekerCv"] = this.jobSeekerCv ? this.jobSeekerCv.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IJobSeekerCvImage {
    id?: number;
    jobSeekerCvId?: number;
    url?: string | undefined;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;
}

export class JobSeekerCvLanguage implements IJobSeekerCvLanguage {
    id?: number;
    jobSeekerCvId?: number;
    languageId?: string | undefined;
    level?: number;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;
    language?: Language | undefined;

    constructor(data?: IJobSeekerCvLanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobSeekerCvId = _data["jobSeekerCvId"];
            this.languageId = _data["languageId"];
            this.level = _data["level"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.jobSeekerCv = _data["jobSeekerCv"] ? JobSeekerCv.fromJS(_data["jobSeekerCv"]) : <any>undefined;
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JobSeekerCvLanguage {
        data = typeof data === 'object' ? data : {};
        let result = new JobSeekerCvLanguage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobSeekerCvId"] = this.jobSeekerCvId;
        data["languageId"] = this.languageId;
        data["level"] = this.level;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["jobSeekerCv"] = this.jobSeekerCv ? this.jobSeekerCv.toJSON() : <any>undefined;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IJobSeekerCvLanguage {
    id?: number;
    jobSeekerCvId?: number;
    languageId?: string | undefined;
    level?: number;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;
    language?: Language | undefined;
}

export class Language implements ILanguage {
    id?: string | undefined;
    name?: string | undefined;
    jobSeekerCvLanguages?: JobSeekerCvLanguage[] | undefined;

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["jobSeekerCvLanguages"])) {
                this.jobSeekerCvLanguages = [] as any;
                for (let item of _data["jobSeekerCvLanguages"])
                    this.jobSeekerCvLanguages!.push(JobSeekerCvLanguage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.jobSeekerCvLanguages)) {
            data["jobSeekerCvLanguages"] = [];
            for (let item of this.jobSeekerCvLanguages)
                data["jobSeekerCvLanguages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILanguage {
    id?: string | undefined;
    name?: string | undefined;
    jobSeekerCvLanguages?: JobSeekerCvLanguage[] | undefined;
}

export class JobSeekerCvSkill implements IJobSeekerCvSkill {
    id?: number;
    jobSeekerCvId?: number;
    name?: string | undefined;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;

    constructor(data?: IJobSeekerCvSkill) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobSeekerCvId = _data["jobSeekerCvId"];
            this.name = _data["name"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.jobSeekerCv = _data["jobSeekerCv"] ? JobSeekerCv.fromJS(_data["jobSeekerCv"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JobSeekerCvSkill {
        data = typeof data === 'object' ? data : {};
        let result = new JobSeekerCvSkill();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobSeekerCvId"] = this.jobSeekerCvId;
        data["name"] = this.name;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["jobSeekerCv"] = this.jobSeekerCv ? this.jobSeekerCv.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IJobSeekerCvSkill {
    id?: number;
    jobSeekerCvId?: number;
    name?: string | undefined;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;
}

export class JobSeekerCvWebSite implements IJobSeekerCvWebSite {
    id?: number;
    jobSeekerCvId?: number;
    webSiteId?: number;
    address?: string | undefined;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;
    webSite?: WebSite | undefined;

    constructor(data?: IJobSeekerCvWebSite) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobSeekerCvId = _data["jobSeekerCvId"];
            this.webSiteId = _data["webSiteId"];
            this.address = _data["address"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.jobSeekerCv = _data["jobSeekerCv"] ? JobSeekerCv.fromJS(_data["jobSeekerCv"]) : <any>undefined;
            this.webSite = _data["webSite"] ? WebSite.fromJS(_data["webSite"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JobSeekerCvWebSite {
        data = typeof data === 'object' ? data : {};
        let result = new JobSeekerCvWebSite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobSeekerCvId"] = this.jobSeekerCvId;
        data["webSiteId"] = this.webSiteId;
        data["address"] = this.address;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["jobSeekerCv"] = this.jobSeekerCv ? this.jobSeekerCv.toJSON() : <any>undefined;
        data["webSite"] = this.webSite ? this.webSite.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IJobSeekerCvWebSite {
    id?: number;
    jobSeekerCvId?: number;
    webSiteId?: number;
    address?: string | undefined;
    createdAt?: Date;
    jobSeekerCv?: JobSeekerCv | undefined;
    webSite?: WebSite | undefined;
}

export class WebSite implements IWebSite {
    id?: number;
    name?: string | undefined;
    jobSeekerCvWebSites?: JobSeekerCvWebSite[] | undefined;

    constructor(data?: IWebSite) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["jobSeekerCvWebSites"])) {
                this.jobSeekerCvWebSites = [] as any;
                for (let item of _data["jobSeekerCvWebSites"])
                    this.jobSeekerCvWebSites!.push(JobSeekerCvWebSite.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WebSite {
        data = typeof data === 'object' ? data : {};
        let result = new WebSite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.jobSeekerCvWebSites)) {
            data["jobSeekerCvWebSites"] = [];
            for (let item of this.jobSeekerCvWebSites)
                data["jobSeekerCvWebSites"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IWebSite {
    id?: number;
    name?: string | undefined;
    jobSeekerCvWebSites?: JobSeekerCvWebSite[] | undefined;
}

export class CompanyStaffVerification implements ICompanyStaffVerification {
    id?: number;
    userId?: number;
    isApproved?: boolean;
    createdAt?: Date;
    approvalDate?: Date | undefined;
    user?: User | undefined;

    constructor(data?: ICompanyStaffVerification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.isApproved = _data["isApproved"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.approvalDate = _data["approvalDate"] ? new Date(_data["approvalDate"].toString()) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CompanyStaffVerification {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyStaffVerification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["isApproved"] = this.isApproved;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["approvalDate"] = this.approvalDate ? this.approvalDate.toISOString() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICompanyStaffVerification {
    id?: number;
    userId?: number;
    isApproved?: boolean;
    createdAt?: Date;
    approvalDate?: Date | undefined;
    user?: User | undefined;
}

export class EmailActivation implements IEmailActivation {
    id?: number;
    userId?: number;
    activationCode?: string | undefined;
    email?: string | undefined;
    isActivated?: boolean;
    createdAt?: Date;
    expirationDate?: Date;
    activationDate?: Date | undefined;
    user?: User | undefined;

    constructor(data?: IEmailActivation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.activationCode = _data["activationCode"];
            this.email = _data["email"];
            this.isActivated = _data["isActivated"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : <any>undefined;
            this.activationDate = _data["activationDate"] ? new Date(_data["activationDate"].toString()) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EmailActivation {
        data = typeof data === 'object' ? data : {};
        let result = new EmailActivation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["activationCode"] = this.activationCode;
        data["email"] = this.email;
        data["isActivated"] = this.isActivated;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        data["activationDate"] = this.activationDate ? this.activationDate.toISOString() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEmailActivation {
    id?: number;
    userId?: number;
    activationCode?: string | undefined;
    email?: string | undefined;
    isActivated?: boolean;
    createdAt?: Date;
    expirationDate?: Date;
    activationDate?: Date | undefined;
    user?: User | undefined;
}

export class MernisActivation implements IMernisActivation {
    id?: number;
    userId?: number;
    isApproved?: boolean;
    createdAt?: Date;
    approvalDate?: Date | undefined;
    user?: User | undefined;

    constructor(data?: IMernisActivation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.isApproved = _data["isApproved"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.approvalDate = _data["approvalDate"] ? new Date(_data["approvalDate"].toString()) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MernisActivation {
        data = typeof data === 'object' ? data : {};
        let result = new MernisActivation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["isApproved"] = this.isApproved;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["approvalDate"] = this.approvalDate ? this.approvalDate.toISOString() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMernisActivation {
    id?: number;
    userId?: number;
    isApproved?: boolean;
    createdAt?: Date;
    approvalDate?: Date | undefined;
    user?: User | undefined;
}

export class EmployerUpdate implements IEmployerUpdate {
    id?: number;
    userId?: number;
    companyStaffId?: number | undefined;
    companyName?: string | undefined;
    website?: string | undefined;
    corporateEmail?: string | undefined;
    phone?: string | undefined;
    updatedAt?: Date;
    isApproved?: boolean;
    isDeleted?: boolean;
    user?: Employer | undefined;

    constructor(data?: IEmployerUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.companyStaffId = _data["companyStaffId"];
            this.companyName = _data["companyName"];
            this.website = _data["website"];
            this.corporateEmail = _data["corporateEmail"];
            this.phone = _data["phone"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.isApproved = _data["isApproved"];
            this.isDeleted = _data["isDeleted"];
            this.user = _data["user"] ? Employer.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EmployerUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new EmployerUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["companyStaffId"] = this.companyStaffId;
        data["companyName"] = this.companyName;
        data["website"] = this.website;
        data["corporateEmail"] = this.corporateEmail;
        data["phone"] = this.phone;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["isApproved"] = this.isApproved;
        data["isDeleted"] = this.isDeleted;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEmployerUpdate {
    id?: number;
    userId?: number;
    companyStaffId?: number | undefined;
    companyName?: string | undefined;
    website?: string | undefined;
    corporateEmail?: string | undefined;
    phone?: string | undefined;
    updatedAt?: Date;
    isApproved?: boolean;
    isDeleted?: boolean;
    user?: Employer | undefined;
}

export class WorkingTime implements IWorkingTime {
    id?: number;
    name?: string | undefined;
    jobAdverts?: JobAdvert[] | undefined;

    constructor(data?: IWorkingTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["jobAdverts"])) {
                this.jobAdverts = [] as any;
                for (let item of _data["jobAdverts"])
                    this.jobAdverts!.push(JobAdvert.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkingTime {
        data = typeof data === 'object' ? data : {};
        let result = new WorkingTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.jobAdverts)) {
            data["jobAdverts"] = [];
            for (let item of this.jobAdverts)
                data["jobAdverts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IWorkingTime {
    id?: number;
    name?: string | undefined;
    jobAdverts?: JobAdvert[] | undefined;
}

export class WorkingType implements IWorkingType {
    id?: number;
    name?: string | undefined;
    jobAdverts?: JobAdvert[] | undefined;

    constructor(data?: IWorkingType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["jobAdverts"])) {
                this.jobAdverts = [] as any;
                for (let item of _data["jobAdverts"])
                    this.jobAdverts!.push(JobAdvert.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkingType {
        data = typeof data === 'object' ? data : {};
        let result = new WorkingType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.jobAdverts)) {
            data["jobAdverts"] = [];
            for (let item of this.jobAdverts)
                data["jobAdverts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IWorkingType {
    id?: number;
    name?: string | undefined;
    jobAdverts?: JobAdvert[] | undefined;
}

export class PaginatedListOfTodoItemDto implements IPaginatedListOfTodoItemDto {
    items?: TodoItemDto[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfTodoItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoItemDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfTodoItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfTodoItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data; 
    }
}

export interface IPaginatedListOfTodoItemDto {
    items?: TodoItemDto[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class TodoItemDto implements ITodoItemDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
    priority?: number;
    note?: string | undefined;

    constructor(data?: ITodoItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.title = _data["title"];
            this.done = _data["done"];
            this.priority = _data["priority"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): TodoItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["title"] = this.title;
        data["done"] = this.done;
        data["priority"] = this.priority;
        data["note"] = this.note;
        return data; 
    }
}

export interface ITodoItemDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
    priority?: number;
    note?: string | undefined;
}

export class CreateTodoItemCommand implements ICreateTodoItemCommand {
    listId?: number;
    title?: string | undefined;

    constructor(data?: ICreateTodoItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listId = _data["listId"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateTodoItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listId"] = this.listId;
        data["title"] = this.title;
        return data; 
    }
}

export interface ICreateTodoItemCommand {
    listId?: number;
    title?: string | undefined;
}

export class UpdateTodoItemCommand implements IUpdateTodoItemCommand {
    id?: number;
    title?: string | undefined;
    done?: boolean;

    constructor(data?: IUpdateTodoItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.done = _data["done"];
        }
    }

    static fromJS(data: any): UpdateTodoItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["done"] = this.done;
        return data; 
    }
}

export interface IUpdateTodoItemCommand {
    id?: number;
    title?: string | undefined;
    done?: boolean;
}

export class UpdateTodoItemDetailCommand implements IUpdateTodoItemDetailCommand {
    id?: number;
    listId?: number;
    priority?: PriorityLevel;
    note?: string | undefined;

    constructor(data?: IUpdateTodoItemDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.priority = _data["priority"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): UpdateTodoItemDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["priority"] = this.priority;
        data["note"] = this.note;
        return data; 
    }
}

export interface IUpdateTodoItemDetailCommand {
    id?: number;
    listId?: number;
    priority?: PriorityLevel;
    note?: string | undefined;
}

export enum PriorityLevel {
    None = 0,
    Low = 1,
    Medium = 2,
    High = 3,
}

export class TodosVm implements ITodosVm {
    priorityLevels?: PriorityLevelDto[] | undefined;
    lists?: TodoListDto[] | undefined;

    constructor(data?: ITodosVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["priorityLevels"])) {
                this.priorityLevels = [] as any;
                for (let item of _data["priorityLevels"])
                    this.priorityLevels!.push(PriorityLevelDto.fromJS(item));
            }
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(TodoListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TodosVm {
        data = typeof data === 'object' ? data : {};
        let result = new TodosVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.priorityLevels)) {
            data["priorityLevels"] = [];
            for (let item of this.priorityLevels)
                data["priorityLevels"].push(item.toJSON());
        }
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITodosVm {
    priorityLevels?: PriorityLevelDto[] | undefined;
    lists?: TodoListDto[] | undefined;
}

export class PriorityLevelDto implements IPriorityLevelDto {
    value?: number;
    name?: string | undefined;

    constructor(data?: IPriorityLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PriorityLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new PriorityLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["name"] = this.name;
        return data; 
    }
}

export interface IPriorityLevelDto {
    value?: number;
    name?: string | undefined;
}

export class TodoListDto implements ITodoListDto {
    id?: number;
    title?: string | undefined;
    colour?: string | undefined;
    items?: TodoItemDto[] | undefined;

    constructor(data?: ITodoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.colour = _data["colour"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TodoListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["colour"] = this.colour;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITodoListDto {
    id?: number;
    title?: string | undefined;
    colour?: string | undefined;
    items?: TodoItemDto[] | undefined;
}

export class CreateTodoListCommand implements ICreateTodoListCommand {
    title?: string | undefined;

    constructor(data?: ICreateTodoListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateTodoListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        return data; 
    }
}

export interface ICreateTodoListCommand {
    title?: string | undefined;
}

export class UpdateTodoListCommand implements IUpdateTodoListCommand {
    id?: number;
    title?: string | undefined;

    constructor(data?: IUpdateTodoListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): UpdateTodoListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data; 
    }
}

export interface IUpdateTodoListCommand {
    id?: number;
    title?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}